// Create and switch to the database
use orderInfoDatabase;

// Create the collection and insert sample documents
db.createCollection("orderinfo");

db.orderinfo.insertMany([
  { cust_id: 123, cust_name: "abc", status: "A", price: 250 },
  { cust_id: 124, cust_name: "def", status: "B", price: 300 },
  { cust_id: 125, cust_name: "ghi", status: "A", price: 400 },
  { cust_id: 126, cust_name: "jkl", status: "A", price: 500 },
  { cust_id: 127, cust_name: "mno", status: "B", price: 600 }
]);

// i. Add "Age" field to the orderinfo collection
db.orderinfo.updateMany({}, { $set: { age: 30 } });

// ii. Create a complex index on the orderinfo collection and drop it
db.orderinfo.createIndex({ "cust_name": 1, "status": 1, "price": -1 }); // Creating a complex index on multiple fields

// Display the index to check if it's created
print("Indexes after creation:");
db.orderinfo.getIndexes();

// Drop the index
db.orderinfo.dropIndex({ "cust_name": 1, "status": 1, "price": -1 });

// Display the indexes to verify the index is dropped
print("Indexes after drop:");
db.orderinfo.getIndexes();

// iii. Display the average price for each customer grouped by status using aggregation
print("Average price for each status:");
db.orderinfo.aggregate([
  { $group: { _id: "$status", avgPrice: { $avg: "$price" } } }
]).forEach(printjson);

// iv. Change the customerâ€™s name whose status is "B"
db.orderinfo.updateMany({ status: "B" }, { $set: { cust_name: "xyz" } });

// Display the updated documents
print("Updated documents with status 'B':");
db.orderinfo.find({ status: "B" }).forEach(printjson);
